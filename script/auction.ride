{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
#
# Smart Contract Implementing Bonds Auction in the Orderbook of Neutrino Protocol 
#

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByKey(key: String) = {
    match getString(this, key) {
            case a:String => a
            case _ => ""
    }
}
func getStringByAddressAndKey(address: Address, key: String) = {
   match getString(address, key) {
            case a:String => a
            case _ => ""
    }
}
func getNumberByAddressAndKey(address: Address, key: String) = {
    match getInteger(address, key) {
            case a:Int => a
            case _ => 0
    }
}

#-------------------Constants---------------------------
let WAVELET = 100000000
let ORDERSPLITSYMBOL = "_"
let PAULI = 1000000
let PERCENTACCURACY = 1000
let MAXDISCOUNT = 50
#------Order statuses------
let CANCELED = "canceled"
let NEW = "new"
let FILLED = "filled"

#-------------------Constructor-------------------------
let NeutrinoContractKey = "neutrino_contract"

#-------------------Keys--------------------------------
let OrderbookKey = "orderbook"
let PriceKey = "price"
let BondAssetIdKey = "bond_asset_id"
let NeutrinoAssetIdKey = "neutrino_asset_id"
let ControlContractKey = "control_contract"
let BalanceLockedkKey = "balance_lock_"
let WavesLockedBalanceKey = BalanceLockedkKey + "waves"
let NeutrinoLockedBalanceKey = BalanceLockedkKey + "neutrino"
let AdminsKey = "admins"

func getOrderPriceKey(orderId: String) = "order_price_" + orderId
func getOrderTotalKey(orderId: String) = "order_total_" + orderId
func getOrderOwnerKey(orderId: String) = "order_owner_" + orderId
func getOrderHeightKey(orderId: String) = "order_height_" + orderId
func getOrderStatusKey(orderId: String) = "order_status_" + orderId
func getOrderFilledTotalKey(orderId: String) = "order_filled_total_" + orderId
func getOrderHistoryKey(height: Int) = "order_history_" + toString(height)
#-------------------Convert functions-------------------
func convertNeutrinoToWaves(amount: Int, price: Int) = fraction(fraction(amount, 100, price),WAVELET, PAULI)
func convertWavesToNeutrino(amount: Int, price: Int) = fraction(fraction(amount, price, 100), PAULI, WAVELET)
func convertNeutrinoToBond(amount: Int) = amount/PAULI 
func convertBondToNeutrino(amount: Int) = amount*PAULI 
func convertWavesToBond(amount: Int, price: Int) = convertNeutrinoToBond(convertWavesToNeutrino(amount, price))
func convertJsonArrayToList(jsonArray: String) = {
   jsonArray.split(",") #jsonArray.take(size(jsonArray)-1).drop(1).split(",")
}

#-------------------Global vars-------------------------
let orderbook = getStringByKey(OrderbookKey)
let neutrinoContract = addressFromStringValue(getStringByKey(NeutrinoContractKey))
let controlContract = addressFromStringValue(getStringByAddressAndKey(neutrinoContract, ControlContractKey)) ## The value from neutrino.ride
let currentPrice = getNumberByAddressAndKey(controlContract, PriceKey) # The value from control.ride

let neutrinoLockedBalance = getNumberByAddressAndKey(neutrinoContract, NeutrinoLockedBalanceKey)
let wavesLockedBalance = getNumberByAddressAndKey(neutrinoContract, WavesLockedBalanceKey)
let neutrinoAssetId = fromBase58String(getStringByAddressAndKey(neutrinoContract, NeutrinoAssetIdKey)) # Assets ids. The value from neutrino.ride
let bondAssetId = fromBase58String(getStringByAddressAndKey(neutrinoContract, BondAssetIdKey))
let reserve = wavesBalance(neutrinoContract) - wavesLockedBalance
let neutrinoSupply = extract(assetInfo(neutrinoAssetId)).quantity - assetBalance(neutrinoContract, neutrinoAssetId) + neutrinoLockedBalance
let deficit = neutrinoSupply - convertWavesToNeutrino(reserve, currentPrice)
let pubKeyAdmins = getStringByAddressAndKey(controlContract, AdminsKey)
let pubKeyAdminsList = convertJsonArrayToList(pubKeyAdmins) 

#-------------------Get functions----------------------
func getOrderPrice(id : String) = getNumberByKey(getOrderPriceKey(id))
func getOrderTotal(id : String) = getNumberByKey(getOrderTotalKey(id))
func getOrderOwner(id : String) = getStringByKey(getOrderOwnerKey(id))
func getOrderStatus(id : String) = getStringByKey(getOrderStatusKey(id))
func getOrderFilledTotal(id : String) = getNumberByKey(getOrderFilledTotalKey(id))
#-------------------Any functions----------------------
func getOrderElementById(id : String) = id + ORDERSPLITSYMBOL
func addOrder(orderId: String, position: Int) = {
    let orders = orderbook.split(ORDERSPLITSYMBOL)
    let newOrder = getOrderElementById(orderId)
    if(position == 0)
        then newOrder + orderbook
    else if(position >= size(orders) - 1)
        then orderbook + newOrder
    else {
        let parts = orderbook.split(getOrderElementById(orders[position]))
        parts[0] + newOrder + getOrderElementById(orders[position]) + parts[1]
    }
}
func dropOrder(orderId: String) = {
    let parts = orderbook.split(getOrderElementById(orderId))
    parts[0] + parts[1]
}
func getOrdersInOrderbook(orderbook: String) = {
    orderbook.split(ORDERSPLITSYMBOL)
}

#-------------------Callable---------------------------

# set buy bonds order
# [called by user]
@Callable(i)
func addBuyBondOrder(price : Int, position: Int) = {
    let pmt = extract(i.payment);
    let newOrderId = toBase58String(keccak256(toBytes(price) + toBytes(pmt.amount) + i.caller.bytes + toBytes(height)))
    
    if(price < MAXDISCOUNT)
        then throw("max discount is 50%")
    else if (pmt.assetId != neutrinoAssetId)
        then throw("can use neutrino only")
    else if(price <= 0)
        then throw("price less zero")
    else if(getOrderOwner(newOrderId) != "")
        then throw("order exists")
    else {
        let orders = getOrdersInOrderbook(orderbook)

        let nextOrderId = if(position == 0) then "" else orders[position-1];
        let nextOrderPrice = getOrderPrice(nextOrderId)
        let isNextOrderError = if(nextOrderId != "" && price > nextOrderPrice) then true else false;

        let prevOrderId = orders[position];
        let prevOrderPrice = getOrderPrice(prevOrderId)
        let isPrevOrderError = if(price <= prevOrderPrice) then true else false;

        if (isNextOrderError || isPrevOrderError)
            then throw("invalid order isPrevOrderError:" + toString(isPrevOrderError) + " isNextOrderError:" + toString(isNextOrderError))
        else
            WriteSet([
                DataEntry(OrderbookKey, addOrder(newOrderId, position)),
         
                DataEntry(getOrderPriceKey(newOrderId), price),
                DataEntry(getOrderTotalKey(newOrderId), pmt.amount),
                DataEntry(getOrderOwnerKey(newOrderId), toString(i.caller)),
                DataEntry(getOrderHeightKey(newOrderId), height),
                DataEntry(getOrderStatusKey(newOrderId), NEW)
            ])
    }
}

# cancel buy bonds order or liquidation order
# [called by user]
@Callable(i)
func cancelOrder(orderId : String) = {
    let owner = getOrderOwner(orderId)
    let amount = getOrderTotal(orderId) - getOrderFilledTotal(orderId)
    if(owner != toString(i.caller))
        then throw("permission denied")
    else if(getOrderStatus(orderId) != NEW)
        then throw("invalid order status")
    else {
        ScriptResult(
            WriteSet([
                DataEntry(OrderbookKey, dropOrder(orderId)),

                DataEntry(getOrderStatusKey(orderId), CANCELED)
            ]),
            TransferSet([
                ScriptTransfer(i.caller, amount, neutrinoAssetId)
            ])
        )
    }
}

# executing buy bonds orders from the bonds orderbook if SC has reached deficit in collateral cap
# it's calling n-times untill all orders from the lbonds orderbook will be executed during deficit stage
# [called by pacemaker oracles]
@Callable(i)
func sellBond() = {
    let bondBalance = assetBalance(this, bondAssetId)
    let deficitPositive = if(deficit <= 0) then 0 else deficit
    let bondAmount = if(deficitPositive >= bondBalance) then bondBalance else deficitPositive
    let returnAmount = if(deficitPositive >= bondBalance) then 0 else bondBalance-deficitPositive
  
    if(returnAmount == 0 && bondAmount == 0) 
        then throw("without deficit")
    else if(bondAmount == 0) then {
        TransferSet([
            ScriptTransfer(neutrinoContract, returnAmount, bondAssetId)
        ])
    }
    else if(orderbook == "")
        then throw("empty orderbook")
    else {
        let orderId = getOrdersInOrderbook(orderbook)[0]
        let filledTotal = getOrderFilledTotal(orderId)
        let orderTotal = getOrderTotal(orderId)
        let orderPrice = getOrderPrice(orderId)
        let orderOwner = getOrderOwner(orderId)
        let amount = convertNeutrinoToBond((orderTotal-filledTotal)*100/orderPrice);
    
        let filledAmount = if(bondAmount >= amount) then amount else bondAmount

        let total = fraction((filledAmount*orderPrice),PAULI,100)
        let status = if(bondAmount >= amount) then FILLED else NEW
        if(total == 0)
            then throw("total equal zero")
        else {
            ScriptResult(
                WriteSet([
                    DataEntry(OrderbookKey, if(bondAmount >= amount) then dropOrder(orderId) else orderbook),
                    DataEntry(getOrderFilledTotalKey(orderId), filledTotal + total),
                    DataEntry(getOrderStatusKey(orderId), status),
                    DataEntry(getOrderHistoryKey(height), orderPrice)
               ]),
               TransferSet([
                    ScriptTransfer(addressFromStringValue(orderOwner), filledAmount, bondAssetId),
                    ScriptTransfer(neutrinoContract, total, neutrinoAssetId)
                ])
            )
        }
    }
}

@Verifier(tx)
func verify() = {
    let count = 
        (if(sigVerify(tx.bodyBytes, fromBase58String(pubKeyAdminsList[0]), tx.proofs[0])) then 1 else 0) + 
        (if(sigVerify(tx.bodyBytes, fromBase58String(pubKeyAdminsList[1]), tx.proofs[1])) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, fromBase58String(pubKeyAdminsList[2]), tx.proofs[2])) then 1 else 0)
    count >= 2
}