{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByKey(key: String) = {
    match getString(this, key) {
            case a:String => a
            case _ => ""
    }
}
func getBoolByAddressAndKey(address: Address, key: String) = {
     match getBoolean(address, key) {
            case a:Boolean => a
            case _ => false
    }
}
func getStringByAddressAndKey(address: Address, key: String) = {
   match getString(address, key) {
            case a:String => a
            case _ => ""
    }
}
func getNumberByAddressAndKey(address: Address, key: String) = {
    match getInteger(address, key) {
            case a:Int => a
            case _ => 0
    }
}

#------Order statuses------
let CANCELED = "canceled"
let NEW = "new"
let FILLED = "filled"

#-------------------Keys--------------------------------
let FirstOrderKey = "order_first"
let firstOrder = getStringByKey(FirstOrderKey)
let LastOrderKey = "order_last"
let lastOrder = getStringByKey(LastOrderKey)

#-------------------Get functions----------------------
func getOrderPriceKey(orderId: String) = "order_price_" + orderId
func getPrevOrderKey(orderId: String) = "order_prev_" + orderId
func getNextOrderKey(orderId: String) = "order_next_" + orderId
func getPrevOrder(id: String) = getStringByKey(getPrevOrderKey(id))
func getNextOrder(id: String) = getStringByKey(getNextOrderKey(id))
func getLastOrderOwnerKey(owner: String) = "last_order_owner_" + owner

func getOrderTotalKey(orderId: String) = "order_total_" + orderId
func getOrderFilledTotalKey(orderId: String) = "order_filled_total_" + orderId
func getOrderOwnerKey(orderId: String) = "order_owner_" + orderId
func getOrderStatusKey(orderId: String) = "order_status_" + orderId

func getOrderTotal(id : String) = getNumberByKey(getOrderTotalKey(id))
func getOrderFilledTotal(id : String) = getNumberByKey(getOrderFilledTotalKey(id))
func getOrderOwner(id : String) = getStringByKey(getOrderOwnerKey(id))
func getOrderStatus(id : String) = getStringByKey(getOrderStatusKey(id))


#-------------------Migration specific keys----------------------
let MigrationOrderCurrentIndexKey = "migration_current_order"
let currentMigrationOrderIndex = getNumberByKey(MigrationOrderCurrentIndexKey)

let CurrentDefaultOrderKey = "order_default"
#-------------------Callable---------------------------

# NSBT to SON liquidation orders migration method (temporary method)
# [called by pacemaker]
@Callable(i)
func migrationOrdersNSBTtoSON() = {
    let keyLastMigratedOrder = "lastMigratedOrderId_migration_SON"
    let finalStatus = "migrated_to_SON"
    let isLastMigratedAsFirstOrder = getStringByKey(keyLastMigratedOrder) == ""
    let lastMigratedOrderId = getStringByKey(keyLastMigratedOrder)
    let currentOrderId = if(isLastMigratedAsFirstOrder) then firstOrder else getNextOrder(lastMigratedOrderId)
    let keyStatusLiquidationMigration = "status_migration_SON_" + currentOrderId
    let orderAmount = getOrderTotal(currentOrderId) - getOrderFilledTotal(currentOrderId)
    let orderOwner = addressFromStringValue(getOrderOwner(currentOrderId))
    let orderStatus = getOrderStatus(currentOrderId)
    let migrationStatus = getStringByKey(keyStatusLiquidationMigration)

    if (migrationStatus == finalStatus)
        then throw("error: order has already migrated" )
    else if (lastOrder == lastMigratedOrderId)
        then throw("status ok: all order has already migrated or nothing to migrate")
    else if (orderStatus != NEW) 
        then WriteSet([
                DataEntry(keyStatusLiquidationMigration, finalStatus),
                DataEntry(keyLastMigratedOrder, currentOrderId)
            ])
    else WriteSet([
                DataEntry(keyStatusLiquidationMigration, finalStatus),
                DataEntry(keyLastMigratedOrder, currentOrderId),
                DataEntry(getOrderPriceKey(currentOrderId), 100),
                DataEntry(CurrentDefaultOrderKey, currentOrderId)
            ])
}

@Verifier(tx)
func verify() = {
    let pubKeyAdminsList = [
        "BLEoguzPVKVTfXxxT3W7Rqf8aUm2ggC9Vemd2MQawM2G",
        "FWVffYr2ALmHMejZm3WqeLz6Sdym3gLFGtJn4KTwyU5x",
        "3Wh2LaWcb5gg7K2pPcW3Ep6EAuRBzYkAgrdpt43jTDFa",
        "5WRXFSjwcTbNfKcJs8ZqXmSSWYsSVJUtMvMqZj5hH4Nc"
    ]
    let count =
        (if(sigVerify(tx.bodyBytes, tx.proofs[0], fromBase58String(pubKeyAdminsList[0]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[1], fromBase58String(pubKeyAdminsList[1]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[2], fromBase58String(pubKeyAdminsList[2]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[3], fromBase58String(pubKeyAdminsList[3]))) then 2 else 0)

    count >= 3
}